- name: Set up git-work user
  user:
    name: "{{ user }}"

- name: Create instance directory
  file: "path={{ instance_dir }} state=directory"
  become_user: "{{ user }}"

- stat: "path=/home/{{ user }}/production.conf"
  register: production_conf_file

- name: ensure prod configuration file exists
  become_user: "{{ user }}"
  copy:
    content: |
      include "application"
      play.http.secret.key="QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241AB`R5W:1uDFN];Ik@n"
      play.filters.hosts {
        allowed = ["{{ web_hostname }}", "127.0.0.1"]
      }
    dest: "/home/{{ user }}/production.conf"
  when: production_conf_file.stat.exists == False

- name: copy systemd service template configuration
  template: >
    src=git-work.service.j2
    dest="/etc/systemd/system/{{ service_name }}.service"
    mode=0755
  register: gws

- name: reload systemd
  systemd:
    name: "{{ service_name }}"
    daemon_reload: yes
  when: gws.changed

- name: Enable service
  service:
    name: "{{ service_name }}"
    enabled: yes

- name: Check if it's been deployed
  stat: "path={{ instance_dir }}/bin/git-work"
  register: check_git_work
  become_user: "{{ user }}"

- name: Extract Git Work .tar.gz
  unarchive:
    src: http://odin.aptelements.com/git-work-0.1-SNAPSHOT.tgz
    dest: "{{ instance_dir }}"
    remote_src: True
    extra_opts: ['--strip-components=1', '--show-stored-names']
  when: (check_git_work.stat.exists == False) or (force_deploy == True)
  register: extracted

- name: restart and enable the service
  systemd:
    name: "{{ service_name }}"
    state: restarted
    enabled: yes
  when: gws.changed or (extracted is defined)

- name: ensure service can be restarted by the user
  template: >
    src=sudoers.j2
    dest=/etc/sudoers.d/{{ service_name }}
    mode=0755

- name: Wait for service to kick in
  wait_for: "port={{ instance_port }} delay=5"

- name: ensure that the service is working
  action: "uri url=http://127.0.0.1:{{ instance_port }} return_content=yes"
  register: webpage
