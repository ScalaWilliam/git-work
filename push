#!/bin/bash
#
# Deployment on a bare server.
# We execute the newest version of the push file first in order
# to run any newly defined actions that are not in the HEAD's push.
#
# Then it will run build-deploy.
#
# Using non-cloud gives us: filesystem access and fairly easy instant
# content deploys. When we reach large scale maybe we'll look at upgrading.
#

DESTDIR=/home/git-work/instance

deploy_content() {
    git pull
    rsync --delete -av ./dist/www/. $DESTDIR/www/.
}



deploy_app() {
  git pull

  # Perform the build and extract the tgz file
  tmp_file=$(mktemp /tmp/git-work-sbt-log.XXXX)
  echo "sbt log file: ${tmp_file}"
  sbt -no-colors 'show universal:packageZipTarball' | tee ${tmp_file}
  tgz_file=$(grep 'tgz$' ${tmp_file} | cut -f 2 -d ' ')

  if [ -z "${tgz_file}" ]; then
    echo "Could not find a produced build .tgz"
    exit 1
  else
    echo "Found tgz file: ${tgz_file}"
    tar -zxvf $tgz_file -C $DESTDIR --strip-components 1
  fi
}

restart_app() {
  sudo -tt systemctl restart git-work
}

case "$1" in
  push)
    git fetch
    ## Check out
    git checkout origin/master -- push
    ./push build-deploy
    ;;
  build-deploy)
    if [[ $(git diff --name-only master origin/master | grep -v 'dist/www' | grep -v 'dist/content' | grep -v README ) == "" ]]; then
      deploy_content
    else
      deploy_app && restart_app
    fi
    ;;
  deploy-app)
    deploy_app
    ;;
  *)
    echo $"Usage: $0 {push|build-deploy}"
    exit 1
esac
